{"ast":null,"code":"export const getState = ({\n  setStore,\n  getStore,\n  getActions\n}) => {\n  return {\n    store: {\n      planets: [],\n      vehicles: [],\n      peoples: [],\n      info: {}\n    },\n    actions: {\n      getPlanets: () => {\n        fetch(\"https://swapi.dev/api/planets/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(data => setStore({\n          planets: data.results\n        }));\n      },\n      getVehicles: () => {\n        fetch(\"https://swapi.dev/api/vehicles/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(data => setStore({\n          vehicles: data.results\n        }));\n      },\n      getPeoples: () => {\n        fetch(\"https://swapi.dev/api/people/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(data => setStore({\n          peoples: data.results\n        }));\n      },\n      getInfo: data => {\n        setStore({\n          info: data\n        });\n      },\n      getPlanetainfo: inf => {\n        const actions = getActions();\n        let cam = 'https://swapi.dev/api/planets/' + inf;\n        fetch(cam).then(response => response.json()).then(data => {\n          actions.getInfo(data);\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/carlosmartinez/Desktop/starwars/src/store/flux.js"],"names":["getState","setStore","getStore","getActions","store","planets","vehicles","peoples","info","actions","getPlanets","fetch","method","headers","then","response","json","data","results","getVehicles","getPeoples","getInfo","getPlanetainfo","inf","cam"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAD,KAAwC;AAE5D,SAAO;AACHC,IAAAA,KAAK,EAAE;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,QAAQ,EAAE,EAFN;AAGJC,MAAAA,OAAO,EAAC,EAHJ;AAIJC,MAAAA,IAAI,EAAE;AAJF,KADJ;AAOHC,IAAAA,OAAO,EAAE;AACNC,MAAAA,UAAU,EAAE,MAAM;AACjBC,QAAAA,KAAK,CAAC,gCAAD,EAAmC;AACpCC,UAAAA,MAAM,EAAE,KAD4B;AAEpCC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AAF2B,SAAnC,CAAL,CAGGC,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIKF,IAJL,CAIUG,IAAI,IAAIhB,QAAQ,CAAC;AAAEI,UAAAA,OAAO,EAACY,IAAI,CAACC;AAAf,SAAD,CAJ1B;AAKA,OAPK;AASNC,MAAAA,WAAW,EAAE,MAAM;AAClBR,QAAAA,KAAK,CAAC,iCAAD,EAAoC;AACrCC,UAAAA,MAAM,EAAE,KAD6B;AAErCC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AAF4B,SAApC,CAAL,CAGGC,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIKF,IAJL,CAIUG,IAAI,IAAIhB,QAAQ,CAAC;AAAEK,UAAAA,QAAQ,EAACW,IAAI,CAACC;AAAhB,SAAD,CAJ1B;AAKA,OAfK;AAiBNE,MAAAA,UAAU,EAAE,MAAM;AACjBT,QAAAA,KAAK,CAAC,+BAAD,EAAkC;AACnCC,UAAAA,MAAM,EAAE,KAD2B;AAEnCC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AAF0B,SAAlC,CAAL,CAGGC,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIKF,IAJL,CAIUG,IAAI,IAAIhB,QAAQ,CAAC;AAAEM,UAAAA,OAAO,EAACU,IAAI,CAACC;AAAf,SAAD,CAJ1B;AAKA,OAvBK;AAyBNG,MAAAA,OAAO,EAAGJ,IAAD,IAAU;AAClBhB,QAAAA,QAAQ,CAAE;AAACO,UAAAA,IAAI,EAACS;AAAN,SAAF,CAAR;AACA,OA3BK;AA6BNK,MAAAA,cAAc,EAAIC,GAAF,IAAW;AAC1B,cAAMd,OAAO,GAAGN,UAAU,EAA1B;AACA,YAAIqB,GAAG,GAAG,mCAAmCD,GAA7C;AAEAZ,QAAAA,KAAK,CAAEa,GAAF,CAAL,CACKV,IADL,CACYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWG,IAAI,IAAI;AACXR,UAAAA,OAAO,CAACY,OAAR,CAAgBJ,IAAhB;AACH,SAJL;AAKA;AAtCK;AAPN,GAAP;AAmDH,CArDM","sourcesContent":["export const getState = ({ setStore, getStore, getActions }) => {\n\n    return {\n        store: {\n           planets: [] ,\n           vehicles: [] ,\n           peoples:[],\n           info: {}\n        },\n        actions: {\n           getPlanets: () => {\n            fetch(\"https://swapi.dev/api/planets/\", {\n                method: \"GET\",\n                headers: { \"Content-Type\": \"application/json\" }\n            }).then(response => response.json())\n                .then(data => setStore({ planets:data.results }))\n           },\n\n           getVehicles: () => {\n            fetch(\"https://swapi.dev/api/vehicles/\", {\n                method: \"GET\",\n                headers: { \"Content-Type\": \"application/json\" }\n            }).then(response => response.json())\n                .then(data => setStore({ vehicles:data.results }))\n           },\n\n           getPeoples: () => {\n            fetch(\"https://swapi.dev/api/people/\", {\n                method: \"GET\",\n                headers: { \"Content-Type\": \"application/json\" }\n            }).then(response => response.json())\n                .then(data => setStore({ peoples:data.results }))\n           },\n\n           getInfo: (data) => {\n            setStore ({info:data})\n           }, \n\n           getPlanetainfo: ( inf ) => {\n            const actions = getActions();\n            let cam = 'https://swapi.dev/api/planets/' + inf;\n\n            fetch (cam)\n                .then ( response => response.json())\n                .then (data => {\n                    actions.getInfo(data);\n                })\n           }\n  \n\n        }\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}