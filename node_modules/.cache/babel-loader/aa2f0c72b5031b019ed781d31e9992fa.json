{"ast":null,"code":"export const getState = ({\n  setStore,\n  getStore,\n  getActions\n}) => {\n  return {\n    store: {\n      planets: [],\n      vehicles: [],\n      peoples: [],\n      info: {},\n      favoriteList: []\n    },\n    actions: {\n      getPlanets: () => {\n        fetch(\"https://swapi.dev/api/planets/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(data => setStore({\n          planets: data.results\n        }));\n      },\n      getVehicles: () => {\n        fetch(\"https://swapi.dev/api/vehicles/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(data => setStore({\n          vehicles: data.results\n        }));\n      },\n      getPeoples: () => {\n        fetch(\"https://swapi.dev/api/people/\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(response => response.json()).then(data => setStore({\n          peoples: data.results\n        }));\n      },\n      getInfo: data => {\n        setStore({\n          info: data\n        });\n      },\n      getPlanetainfo: inf => {\n        const actions = getActions();\n        let url = 'https://swapi.dev/api/planets/' + inf;\n        fetch(url).then(response => response.json()).then(data => {\n          actions.getInfo(data);\n        });\n      },\n      getPeopleinfo: peo => {\n        const actions = getActions();\n        let url = 'https://swapi.dev/api/people/' + peo;\n        fetch(url).then(response => response.json()).then(data => {\n          actions.getInfo(data);\n        });\n      },\n      getVehiclesinfo: veh => {\n        const actions = getActions();\n        let url = 'https://swapi.dev/api/starships/' + veh;\n        fetch(url).then(response => response.json()).then(data => {\n          actions.getInfo(data);\n        });\n      },\n      addFavorite: item => {\n        const store = getStore();\n        if (store.favorites.find(elemento => elemento === newItem)) return;\n        const updatedFavorites = store.favorites.concat(newItem);\n        setStore({\n          favorites: updatedFavorites\n        });\n      },\n      removeFavorite: favoriteIndex => {\n        const store = getStore();\n        store.favoriteList.splice(favoriteIndex, 1);\n        setStore({\n          favoriteList: store.favoriteList\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/carlosmartinez/Desktop/starwars/src/store/flux.js"],"names":["getState","setStore","getStore","getActions","store","planets","vehicles","peoples","info","favoriteList","actions","getPlanets","fetch","method","headers","then","response","json","data","results","getVehicles","getPeoples","getInfo","getPlanetainfo","inf","url","getPeopleinfo","peo","getVehiclesinfo","veh","addFavorite","item","favorites","find","elemento","newItem","updatedFavorites","concat","removeFavorite","favoriteIndex","splice"],"mappings":"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","sourcesContent":["export const getState = ({ setStore, getStore, getActions }) => {\n\n    return {\n        store: {\n            planets: [],\n            vehicles: [],\n            peoples: [],\n            info: {},\n            favoriteList: [],\n        },\n        actions: {\n            getPlanets: () => {\n                fetch(\"https://swapi.dev/api/planets/\", {\n                    method: \"GET\",\n                    headers: { \"Content-Type\": \"application/json\" }\n                }).then(response => response.json())\n                    .then(data => setStore({ planets: data.results }))\n            },\n\n            getVehicles: () => {\n                fetch(\"https://swapi.dev/api/vehicles/\", {\n                    method: \"GET\",\n                    headers: { \"Content-Type\": \"application/json\" }\n                }).then(response => response.json())\n                    .then(data => setStore({ vehicles: data.results }))\n            },\n\n            getPeoples: () => {\n                fetch(\"https://swapi.dev/api/people/\", {\n                    method: \"GET\",\n                    headers: { \"Content-Type\": \"application/json\" }\n                }).then(response => response.json())\n                    .then(data => setStore({ peoples: data.results }))\n            },\n\n            getInfo: (data) => {\n                setStore({ info: data })\n            },\n\n            getPlanetainfo: (inf) => {\n                const actions = getActions();\n                let url = 'https://swapi.dev/api/planets/' + inf;\n\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        actions.getInfo(data);\n                    })\n            },\n\n            getPeopleinfo: (peo) => {\n                const actions = getActions();\n                let url = 'https://swapi.dev/api/people/' + peo;\n\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        actions.getInfo(data);\n                    })\n            },\n\n            getVehiclesinfo: (veh) => {\n                const actions = getActions();\n                let url = 'https://swapi.dev/api/starships/' + veh;\n\n                fetch(url)\n                    .then(response => response.json())\n                    .then(data => {\n                        actions.getInfo(data);\n                    })\n            },\n\n            addFavorite: (item) => {\n                const store = getStore();\n                if (store.favorites.find((elemento) => elemento === newItem)) return;\n                const updatedFavorites = store.favorites.concat(newItem);\n                setStore({ favorites: updatedFavorites });\n            },\n            removeFavorite: favoriteIndex => {\n                const store = getStore();\n\t\t\t\tstore.favoriteList.splice(favoriteIndex, 1);\n                setStore({ favoriteList: store.favoriteList });\n\t\t\t},\n\n\n        }\n    };\n\n}\n"]},"metadata":{},"sourceType":"module"}